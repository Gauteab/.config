snippet mod "A Simple module"
module ${1:Main} where
endsnippet

snippet proxy "servant api proxy"
api :: Proxy ${1:API}
api = Proxy
endsnippet
	

snippet rec "Record"
data $1 = $1 { field :: Value }
endsnippet

snippet field "RecordField"
, $1 :: $1
endsnippet
	
	
	
snippet ec "Evaluate-able comment"
-- >>> 
endsnippet

snippet re "Import Relude"
{-# LANGUAGE NoImplicitPrelude #-}
import Relude
endsnippet
	
snippet sh "Shell Script Template"
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExtendedDefaultRules #-}
{-# LANGUAGE NoImplicitPrelude #-}

import Relude
import Shelly

main :: IO ()
main = shelly $ do
	echo ${1:"Hello"}
endsnippet

snippet cw "CodeWars Template"
import Test.Hspec

main :: IO ()
main = hspec spec
endsnippet

snippet aoc "Advent of Code"
module Day$1 (main) where

main :: IO ()
main = do
  input <- map read . lines <$> readFile "input/$1"
  print $ ${1:input}
endsnippet
